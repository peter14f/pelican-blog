113-path_sum_ii
###############

:date: 2015-11-28 0:09
:tags: Binary Trees, Recursion, DFS
:category: LeetCode
:slug: 113-path_sum_ii

`LeetCode Problem Link <https://leetcode.com/problems/path-sum-ii/>`_

Like a lot of the NP problems, we use recursion and a current working list.

.. code-block:: java

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();

        if (root != null) {
            List<Integer> path = new ArrayList<Integer>();
            getPathToSum(root, path, sum, ans);
        }

        return ans;
    }

    private void getPathToSum(
            TreeNode cur,
            List<Integer> path,
            int sum,
            List<List<Integer>> ans) {

        path.add(cur.val);
        sum = sum - cur.val;

        if (cur.left == null && cur.right == null) {
            if (sum==0)
                ans.add(new ArrayList<Integer>(path));
        }
        else {
            if (cur.left != null)
                getPathToSum(cur.left, path, sum, ans);

            if (cur.right != null)
                getPathToSum(cur.right, path, sum, ans);
        }

        path.remove(path.size() - 1);
    }