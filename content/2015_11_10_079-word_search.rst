079-word_search
###############

:date: 2015-11-10 13:09
:tags: DFS
:category: LeetCode
:slug: 079-word_search

`LeetCode Problem Link <https://leetcode.com/problems/word-search/>`_

This problem can be solved using DFS. To prevent visiting cells already in the current path, I use a 2D boolean
array called ``visited`` whose size is the same as ``board``.

If we find the word, we can immediately return true.

.. code-block:: java

    public boolean exist(char[][] board, String word) {

        int m = board.length;
        if (m < 1)
            return false;

        int n = board[0].length;

        char[] arrWord = word.toCharArray();
        boolean[][] visited = new boolean[m][n];

        for (int row=0; row < m; row++) {
            for (int col=0; col < n; col++) {
                if (board[row][col] == arrWord[0]) {
                    boolean found = foundWord(board, row, col, new boolean[m][n], arrWord, 0);
                    if (found)
                        return true;
                }
            }
        }

        return false;
    }

    private boolean foundWord(
            char[][] board,
            int row,
            int col,
            boolean[][] visited,
            char[] arrWord,
            int i) {

        int m = board.length;
        int n = board[0].length;

        visited[row][col] = true;

        if (i==arrWord.length - 1) {
            return true;
        }

        i++;

        if (row-1 >=0 && !visited[row-1][col] && board[row-1][col] == arrWord[i]) {
            if (foundWord(board, row-1, col, visited, arrWord, i))
                return true;
        }

        if (row + 1 < m && !visited[row+1][col] && board[row+1][col] == arrWord[i]) {
            if (foundWord(board, row+1, col, visited, arrWord, i))
                return true;
        }

        if (col-1 >=0 && !visited[row][col-1] && board[row][col-1] == arrWord[i]) {
            if (foundWord(board, row, col-1, visited, arrWord, i))
                return true;
        }

        if (col+1 < n && !visited[row][col+1] && board[row][col+1] == arrWord[i]) {
            if (foundWord(board, row, col+1, visited, arrWord, i))
                return true;
        }

        visited[row][col] = false;
        return false;
    }

