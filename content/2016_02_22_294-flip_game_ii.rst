294-flip_game_ii
################

:date: 2016-2-22 22:28
:tags: Flip Game
:category: LeetCode
:slug: 294-flip_game_ii

`LeetCode Problem Link <https://leetcode.com/problems/flip-game-ii/>`_

The game ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to determine if the starting player can guarantee a win given a starting string ``s``.

If the current consecutive number of '+'s is >=2 and after the flip, the number of consecutive number of '+'s
becomes < 2, then you're guaranteed to win.

My origin idea is use two queues to simulate at each round the strings that player 1 and player 2 have to
deal with.

.. code-block:: java

    public boolean canWin(String s) {
        Queue<String> q1 = new LinkedList<String>();
        Queue<String> q2 = new LinkedList<String>();

        q1.offer(s);

        while (!q1.isEmpty() || !q2.isEmpty()) {

            if (!q1.isEmpty()) {
                // I'm yet to make a move
                while (!q1.isEmpty()) {
                    String str = q1.poll();

                    List<String> insertInQ2 = generatePossibleNextMoves(str);

                    for (String st: insertInQ2) {
                        if (getNumPairs(st) == 0)
                            return true;
                        q2.offer(st);
                    }
                }

                if (q2.isEmpty()) {
                    // I couldn't make any more
                    return false;
                }
            }
            else if (!q2.isEmpty()) {
                // the opponent is yet to make a move
                String str = q2.poll();
                List<String> insertInQ1 = generatePossibleNextMoves(str);

                for (String st: insertInQ1) {
                    if (getNumPairs(st) == 0)
                        return false;
                    q1.offer(st);
                }

                if (q1.isEmpty())
                    // opponent couldn't make any more
                    return true;
            }
        }

        return false;
    }

    private int getNumPairs(String s) {
        int cnt = 0;

        for (int i=0; i<s.length()-1; i++) {
            if (s.charAt(i) == '+' && s.charAt(i+1) == '+') {
                cnt++;
            }
        }

        return cnt;
    }

    public List<String> generatePossibleNextMoves(String s) {
        List<String> nextState = new ArrayList<String>();

        StringBuffer sb = new StringBuffer(s);

        for (int start=0; start<s.length()-1; start++) {

            if (s.charAt(start) == '+' && s.charAt(start+1) == '+') {
                // temporary flip sb
                sb.setCharAt(start, '-');
                sb.setCharAt(start+1, '-');

                // save a copy into nextState
                nextState.add(sb.toString());

                // undo the change on sb
                sb.setCharAt(start, '+');
                sb.setCharAt(start+1, '+');
            }

        }

        return nextState;
    }


But I got memory limit exceeded.

::

    Submission Result: Memory Limit Exceeded More Details

    Last executed input:
    "++-----------++++++-----+-------------------------+-+-++++++"

This to me suggests that it's worth trying DFS instead of BFS.
Here is an implementation that passes.

.. code-block:: java

    public boolean canWin(String s) {

        return canWinCheck(s);

    }

    private boolean canWinCheck(String s) {

        List<String> nextMoves = generatePossibleNextMoves(s);

        for (String move : nextMoves) {
            boolean toReturn = !canWin(move);

            if (toReturn)
                return true;
        }

        // none of the moves generated leads to victory
        return false;
    }

    public List<String> generatePossibleNextMoves(String s) {
        List<String> nextState = new ArrayList<String>();

        StringBuffer sb = new StringBuffer(s);

        for (int start=0; start<s.length()-1; start++) {

            if (s.charAt(start) == '+' && s.charAt(start+1) == '+') {
                // temporary flip sb
                sb.setCharAt(start, '-');
                sb.setCharAt(start+1, '-');

                // save a copy into nextState
                nextState.add(sb.toString());

                // undo the change on sb
                sb.setCharAt(start, '+');
                sb.setCharAt(start+1, '+');
            }

        }

        return nextState;
    }

In fact, we don't need all these copies of strings. The space complexity can be greatly reduced if we just
use a char[].





