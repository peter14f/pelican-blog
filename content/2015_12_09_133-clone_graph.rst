133-clone_graph
###############

:date: 2015-12-9 20:57
:tags: DFS, Graph, Undirected Graph, BFS
:category: LeetCode
:slug: 133-clone_graph

`LeetCode Problem Link <https://leetcode.com/problems/clone-graph/>`_

Use recursion and DFS to deep copy the graph. ``mapping`` is a mapping from the UndirectedGraphNode in the original
graph to the UndirectedGraphNode in the new graph. Need to be careful with the condition of when the DFS should
terminate.

.. code-block:: java

    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node==null)
            return null;

        HashMap<UndirectedGraphNode, UndirectedGraphNode> mapping = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        dfsCopy(node, mapping);

        return mapping.get(node);
    }

    private void dfsCopy(UndirectedGraphNode node, HashMap<UndirectedGraphNode, UndirectedGraphNode> mapping) {
        if (mapping.containsKey(node)) {
            return;
        }

        UndirectedGraphNode newNode = new UndirectedGraphNode(node.label);
        mapping.put(node, newNode);

        for (UndirectedGraphNode neighbor: node.neighbors) {
            dfsCopy(neighbor, mapping);
            newNode.neighbors.add(mapping.get(neighbor));
        }
    }

Revisited the problem on 03/02/2016. We could also solve this using BFS. The condition to
stop the BFS is just like when we're detecting if a cycle exists in a undirected graph.
(Same node would be put on the queue more than once)

A related problem is given a undirected graph, see if it's a valid BST.
That's 261-graph_valid_tree.

.. code-block:: java

    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {

        if (node==null)
            return null;

        UndirectedGraphNode src = new UndirectedGraphNode(node.label);

        HashMap<UndirectedGraphNode, UndirectedGraphNode> clone = new
                HashMap<UndirectedGraphNode, UndirectedGraphNode>();

        clone.put(node, src);

        Queue<UndirectedGraphNode> q = new LinkedList<UndirectedGraphNode>();

        q.offer(node);

        // stored nodes in the original graph whose neighbor links are already cloned
        HashSet<UndirectedGraphNode> cloned = new HashSet<UndirectedGraphNode>();

        while (!q.isEmpty()) {
            UndirectedGraphNode cur = q.poll();

            if (cloned.contains(cur))
                continue;

            UndirectedGraphNode curClone = clone.get(cur);

            for (UndirectedGraphNode neighbor: cur.neighbors) {

                if (!clone.containsKey(neighbor)) {
                    UndirectedGraphNode neighborClone = new UndirectedGraphNode(neighbor.label);
                    clone.put(neighbor, neighborClone);

                }
                UndirectedGraphNode neighborClone = clone.get(neighbor);
                curClone.neighbors.add(neighborClone);

                q.offer(neighbor);
            }

            cloned.add(cur);
        }

        return src;
    }

