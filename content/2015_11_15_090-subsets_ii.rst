090-subsets_ii
##############

:date: 2015-11-15 21:46
:tags: Subsets, Recursion, Duplicates
:category: LeetCode
:slug: 090-subsets_ii

`LeetCode Problem Link <https://leetcode.com/problems/subsets/>`_

A followup problem of 078-subsets. The difference is now that the input collection of integers might contain
duplicates.

In the first try, this is what I got. If the current number at index ``i`` is the same as the previous number at index
``i-1``, I only add the current number to the existing subsets that have ``k-1`` occurences at the end of the list where
``k`` is the number of consecutive times we've seen the number so far. This is a solution that passes the OJ, but
checking the number of times current number occurs at the end of the existing subset makes this approach seem slow.

.. code-block:: java

    public List<List<Integer>> subsetsWithDup(int[] nums) {

        Arrays.sort(nums);

        int dupCnt = 0;
        List<List<Integer>> subsets = new ArrayList<List<Integer>>();
        // empty set
        subsets.add(new ArrayList<Integer>());

        for (int i=0; i<nums.length; i++) {
            if (i==0 || nums[i] != nums[i-1]) {
                dupCnt = 1;
                int oldSize = subsets.size();

                for (int j=0; j<oldSize; j++) {
                    List<Integer> newSubset = new ArrayList<Integer>(subsets.get(j));
                    newSubset.add(nums[i]);
                    subsets.add(newSubset);
                }
            }
            else {
                dupCnt++;
                int oldSize = subsets.size();

                for (int j=0; j<oldSize; j++) {
                    List<Integer> oldSubset = subsets.get(j);

                    if (oldSubset.size() >= dupCnt-1) {
                        boolean addCurNum = true;

                        for (int k=1; k<dupCnt; k++) {
                            if (oldSubset.get(oldSubset.size() - k) != nums[i]) {
                                addCurNum = false;
                                break;
                            }
                        }

                        if (addCurNum) {
                            List<Integer> newSubset = new ArrayList<Integer>(oldSubset);
                            newSubset.add(nums[i]);
                            subsets.add(newSubset);
                        }
                    }
                }
            }
        }

        return subsets;
    }

I like the following recursive solution better. How I deal with the duplicates is exactly the same as in
040-combination_sum_ii. When deciding not to pick up the current number, we must skip over the duplicated
items as well.

.. code-block:: java

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();

        if (nums.length == 0) {
            ans.add(new ArrayList<Integer>());
            return ans;
        }

        Arrays.sort(nums);
        List<Integer> curList = new ArrayList<Integer>();
        getSubsetsWithDup(nums, 0, curList, ans);

        return ans;
    }

    private void getSubsetsWithDup(
            int[] nums,
            int index,
            List<Integer> curList,
            List<List<Integer>> ans) {

        // choose not to include index
        if (index == nums.length - 1) {
            ans.add(new ArrayList<Integer>(curList));
        }
        else {
            int d = 1;
            while (index+d < nums.length && nums[index + d] == nums[index]) {
                d++;
            }

            if (index+d < nums.length) {
                getSubsetsWithDup(nums, index+d, curList, ans);
            }
            else {
                ans.add(new ArrayList<Integer>(curList));
            }
        }

        // choose to include index
        curList.add(nums[index]);

        if (index == nums.length - 1) {
            ans.add(new ArrayList<Integer>(curList));
        }
        else {
            getSubsetsWithDup(nums, index+1, curList, ans);
        }

        curList.remove(curList.size() - 1);
    }
