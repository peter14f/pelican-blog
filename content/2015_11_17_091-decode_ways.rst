091-decode_ways
###############

:date: 2015-11-17 12:43
:tags: Recursion, Dynamic Programming, Count Ways
:category: LeetCode
:slug: 091-decode_ways

`LeetCode Problem Link <https://leetcode.com/problems/decode-ways/>`_

I will show the recursive solution first, which cannot pass the long test cases.

.. code-block:: java

    public int numDecodings(String s) {
        char[] sArr = s.toCharArray();
        int[] ans = {0};

        if (sArr.length == 0)
            return ans[0];

        numDecodings(sArr, 0, ans);

        return ans[0];
    }

    private void numDecodings(char[] sArr, int index, int[] ans) {


        int number = sArr[index] - '0';
        if (number >= 1 && number <=9) {
            if (index == sArr.length - 1) {
                ans[0]++;
            }
            else {
                numDecodings(sArr, index+1, ans);
            }
        }
        else {
            return;
        }

        if (index + 1 < sArr.length) {
            number = (sArr[index] - '0');

            if (number == 1 || number == 2) {
                number = 10*number + (sArr[index+1] - '0');

                if (number >=10 && number <= 26) {
                    if (index + 1 == sArr.length - 1) {
                        ans[0]++;
                    }
                    else {
                        numDecodings(sArr, index+2, ans);
                    }
                }
            }
        }
    }

Here is the dynamic programming approach. Index ``i`` starts from the last index and move toward ``0``. If the
substring starting at ``i+1`` can be decoded in ``x`` ways, then if the substring with length 1 starting at
index ``i`` can be decoded, we have x ways to decode the substring starting at index ``i`` if we choose to split
right at index ``i``. If the substring starting at ``i+2`` can be decoded in ``y`` ways, then if the substring with
length 2 starting at index ``i`` can be decoded, we have y ways to decode the substring starting at index ``i`` if we
choose to split right at index ``i+1``.

.. code-block:: java

    public int numDecodings(String s) {

        char[] sArr = s.toCharArray();
        int n = sArr.length;

        int i = n - 1;

        /* number of ways to decode the substring
         * starting at index i+1
         */
        int prev = 1;

        /* number of ways to decode the substring
         * starting at index i+2
         */
        int prevPrev = 0;

        /* number of ways to decode the substring
         * starting at index i
         */
        int cnt = 0;

        while (i >= 0) {
            int num = 0;

            cnt = 0;

            if (prev > 0) {
                num = sArr[i] - '0';
                if (num >= 1 && num <=9)
                    cnt += prev;
            }

            if (prevPrev > 0) {
                num = sArr[i] - '0';
                if (num == 1 || num ==2) {
                    num = num*10 + (sArr[i+1] - '0');

                    if (num >= 10 && num <= 26) {
                        cnt += prevPrev;
                    }
                }
            }

            prevPrev = prev;
            prev = cnt;

            i--;
        }

        return cnt;
    }
