289-game_of_life
################

:date: 2016-2-22 17:11
:tags: Recursion
:category: LeetCode
:slug: 289-game_of_life

`LeetCode Problem Link <https://leetcode.com/problems/game-of-life/>`_

If you make a copy of the current state, the problem is pretty straightforward.

.. code-block:: java

    // state 1 - live
    // state 0 - dead
    // compute the next state (after one update) of the board
    // given its current state
    public void gameOfLife(int[][] board) {
        int m = board.length;

        if (m==0)
            return;

        int n = board[0].length;

        int[][] curState = new int[m][n];

        for (int row=0; row<m; row++) {
            for (int col=0; col<n; col++) {
                curState[row][col] = board[row][col];
            }
        }

        for (int row=0; row<m; row++) {
            for (int col=0; col<n; col++) {
                int numLiveNeighbors = getNumLiveNeighbors(curState, row, col);

                if (curState[row][col] == 0) {
                    if (numLiveNeighbors == 3) {
                        board[row][col] = 1;
                    }
                }
                else if (curState[row][col] == 1) {
                    if (numLiveNeighbors < 2) {
                        board[row][col] = 0;
                    }
                    else if (numLiveNeighbors > 3) {
                        board[row][col] = 0;
                    }
                }
            }
        }
    }

    private int getNumLiveNeighbors(int[][] board, int row, int col) {
        int cnt = 0;
        int m = board.length;
        int n = board[0].length;

        // up
        if (row - 1 >= 0 && board[row-1][col] == 1)
            cnt++;

        // up-right
        if (row - 1 >= 0 && col + 1 < n && board[row-1][col+1] == 1)
            cnt++;

        // right
        if (col + 1 < n && board[row][col+1] == 1)
            cnt++;

        // bottom-right
        if (row + 1 < m && col + 1 < n && board[row+1][col+1] == 1)
            cnt++;

        // bottom
        if (row + 1 < m && board[row+1][col] == 1)
            cnt++;

        // bottom-left
        if (row + 1 < m && col - 1 >=0 && board[row+1][col-1] == 1)
            cnt++;

        // left
        if (col - 1 >= 0 && board[row][col-1] == 1)
            cnt++;

        // top-left
        if (row - 1>=0 && col-1 >= 0 && board[row-1][col-1] == 1)
            cnt++;

        return cnt;
    }

The followup asks us if we could do this in-place. I think it's impossible to do this entirely in-place. But we
could probably cache the current row of the current state.

Guess what? I was wrong. There is a way to do it in-place. It just requires two passes. In the first pass, mark
dead-to-live cells ``2`` and live-to-dead cells ``3``. This way, even during the first pass, we can still
know what a cell's current state is continue filling up the entire board.

So state ``0`` and ``2`` both mean the currently the cell is dead. (bit 0 is not set)
State ``1`` and ``3`` both mean that currently the cell is live. (bit 1 is set)

.. code-block:: java

    // state 1 - live
    // state 0 - dead
    // compute the next state (after one update) of the board
    // given its current state
    public void gameOfLife(int[][] board) {
        int m = board.length;

        if (m == 0)
            return;

        int n = board[0].length;


        // first pass
        for (int row=0; row<m; row++) {
            for (int col=0; col<n; col++) {
                int liveNeighbors = getLiveNeighbors(board, row, col);

                if (board[row][col] == 1) {
                    if (liveNeighbors < 2) {
                        board[row][col] = 3;  // live-to-dead
                    }
                    else if (liveNeighbors > 3) {
                        board[row][col] = 3;  // live-to-dead
                    }
                }
                else {
                    if (liveNeighbors == 3) {
                        board[row][col] = 2; // dead-to-live
                    }
                }
            }
        }

        // second pass
        for (int row=0; row<m; row++) {
            for (int col=0; col<n; col++) {
                if (board[row][col] == 3)
                    board[row][col] = 0;
                else if (board[row][col] == 2) {
                    board[row][col] = 1;
                }
            }
        }
    }

    private int getLiveNeighbors(int[][] board, int row, int col) {
        int m = board.length;
        int n = board[0].length;
        int cnt = 0;

        // top
        if (row - 1 >= 0 && (board[row-1][col] & 1) == 1)
            cnt++;

        // top-right
        if (row - 1 >=0 && col + 1 < n && (board[row-1][col+1] & 1) == 1)
            cnt++;

        // right
        if (col + 1 < n && (board[row][col+1] & 1) == 1)
            cnt++;

        // bottom-right
        if (row + 1 < m && col + 1 < n && (board[row+1][col+1] & 1) == 1)
            cnt++;

        // bottom
        if (row + 1 < m && (board[row+1][col] & 1) == 1)
            cnt++;

        // bottom-left
        if (row + 1 < m && col - 1 >=0 && (board[row+1][col-1] & 1) == 1)
            cnt++;

        // left
        if (col - 1 >= 0 && (board[row][col-1] & 1) == 1)
            cnt++;

        // top-left
        if (row - 1 >= 0 && col - 1 >= 0 && (board[row-1][col-1] & 1) == 1)
            cnt++;

        return cnt;
    }
