135-candy
#########

:date: 2015-12-11 12:41
:tags: Greedy Algorithm
:category: LeetCode
:slug: 135-candy

`LeetCode Problem Link <https://leetcode.com/problems/candy/>`_

| Ratings={1, 2, 3, 3, 3}, the minimum number of candy needed would be {1, 2, 3, 1, 1}
| Ratings={1, 2, 3, 2, 3}, the minimum number of candy needed would be {1, 2, 3, 1, 2}

Use two for loops, the first one from left to right, the second one from right to left.

Initialize ``numCandy[0]`` to 1.
In the first loop, set the current number of candy to the previous + 1 if the current rating is greater than the
previous rating. Otherwise set ``numCandy[i]`` to 1.

Int the second loop, if the current rating is greater than the previous rating, but ``numCandy[i] <= numCandy[i+1]``,
then we must correct it by setting ``numCandy[i]`` to ``numCandy[i] + 1``.

.. code-block:: java

    public int candy(int[] ratings) {
        int n = ratings.length;

        if (n==0)
            return 0;

        int[] numCandy = new int[n];
        int prevRating = ratings[0];
        numCandy[0] = 1;

        for (int i=1; i<n; i++) {
            if (ratings[i] > prevRating) {
                numCandy[i] = numCandy[i-1] + 1;
            }
            else if (ratings[i] == prevRating) {
                numCandy[i] = 1;
            }
            else {
                numCandy[i] = 1;
            }

            prevRating = ratings[i];
        }

        prevRating = ratings[n-1];

        for (int i=n-2; i>=0; i--) {
            if (ratings[i] > prevRating) {
                if (numCandy[i] <= numCandy[i+1]) {
                    numCandy[i] = numCandy[i+1] + 1;
                }
            }

            prevRating = ratings[i];
        }


        int total = 0;
        for (int i=0; i<n; i++)
            total+=numCandy[i];

        return total;
    }
