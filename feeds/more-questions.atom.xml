<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peter's Coding Notes</title><link href="http://peter14f.github.io/pelican-blog/" rel="alternate"></link><link href="http://peter14f.github.io/pelican-blog/feeds/more-questions.atom.xml" rel="self"></link><id>http://peter14f.github.io/pelican-blog/</id><updated>2016-02-28T11:36:00-08:00</updated><entry><title>number_of_squares</title><link href="http://peter14f.github.io/pelican-blog/number_of_squares.html" rel="alternate"></link><updated>2016-02-28T11:36:00-08:00</updated><author><name>Peter Hsieh</name></author><id>tag:peter14f.github.io,2016-02-28:pelican-blog/number_of_squares.html</id><summary type="html">&lt;p&gt;How many squares can you find in a &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; x &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; 2d grid.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
public int numSquares(int m, int n) {
    //
}
&lt;/pre&gt;
&lt;p&gt;So let's first determine the size of the largest square we can find in the grid.&lt;/p&gt;
&lt;p&gt;It must be &lt;tt class="docutils literal"&gt;min&lt;/tt&gt; x &lt;tt class="docutils literal"&gt;min&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;min = Math.min(m, n)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The smallest square we can find in the grid is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; x &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We can then work our way from [0][0] to [m-1][n-1] to look for squares of size &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; x &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;, ..., &lt;tt class="docutils literal"&gt;min&lt;/tt&gt; x &lt;tt class="docutils literal"&gt;min&lt;/tt&gt;&lt;/p&gt;
</summary></entry></feed>